package fr.xebia.xebicon.blog;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.io.IOException;

import static org.assertj.core.api.Assertions.assertThat;

public class PostTest {

    @Test
    public void should_convert_object_to_json() throws JsonProcessingException {
        // Given
        ObjectMapper objectMapper = new ObjectMapper();
        Post post = new Post(new String[]{"category"}, "content", "creator", "description", "14/07/1987", "title");

        // When
        String json = objectMapper.writeValueAsString(post);

        // Then
        assertThat(json).isNotEmpty();
        System.out.println("Result : " + json);
    }

    @Test
    public void should_convert_json_to_object() throws IOException {
        // Given
        ObjectMapper objectMapper = new ObjectMapper();
        String jsonString = "{\"title\":\"Selma le mapping Java à la compilation\",\"pubDate\":\"2014-04-24T09:39:45\",\"creator\":\"Séven Le Mesle\",\"category\":[\"DevOps\",\"java\",\"Mapping\",\"Selma\"],\"description\":\"Au bout de quelques années à œuvrer dans la communauté Java de mission en mission, j&#8217;ai décidé de rentrer en guerre contre les frameworks de mapping au Runtime, Dozer en tête. Pourquoi me direz vous ? Eh bien, ils ne sont pas fortement typés, ils ne supportent pas bien le refactoring, ils vous laissent découvrir les [...]\",\"content\":\"<h3 id=\"SelmalemappingJavaàlacompilation-\"><a href=\"http://blog.xebia.fr/wp-content/uploads/2014/04/logo-v6.png\" target=\"_blank\"><img width=\"300\" src=\"http://blog.xebia.fr/wp-content/uploads/2014/04/logo-v6-300x187.png\" style=\"float:right; margin:0 0 10px 10px;\" /></a></h3>\n<p>Au bout de quelques années à œuvrer dans la communauté Java de mission en mission, j&rsquo;ai décidé de rentrer en guerre contre les frameworks de mapping au Runtime, Dozer en tête. Pourquoi me direz vous ? Eh bien, ils ne sont pas fortement typés, ils ne supportent pas bien le refactoring, ils vous laissent découvrir les erreurs au Runtime et pour finir, ils sont rarement performants. Je préfère donc toujours écrire mon mapping de bean à bean, à la main plutôt que d&rsquo;utiliser un framework, avec lequel je vais découvrir les bugs au dernier moment (en production ?). L&rsquo;idéal est sûrement d&rsquo;éviter tout bonnement le mapping de bean à bean, mais cette vision reste idyllique et ne concerne que peu de cas. Cette philosophie a fini par me coûter cher, le jour où j&rsquo;ai dû attaquer un mapping sur une grande grappe d&rsquo;objets, le code était répétitif et n&rsquo;avait que peu de valeur ajoutée. Après 300 lignes de <em>if set, …</em>, on en viendrait presque à regretter le bon vieux Mapping en réflexion. L&rsquo;idée est née ici : tirer le meilleur des deux mondes : automatiser le mapping et le typer fortement en remontant les erreurs à la compilation.</p>\n<p>Dans cet article, je vous présenterai Selma, la bibliothèque développée par Xebia pour en finir avec les anciens frameworks de mapping.</p>\n<p><span id=\"more-18037\"></span></p>\n<h2 id=\"SelmalemappingJavaàlacompilation-Leprincipe\">Le principe</h2>\n<p>Comment automatiser le mapping de bean Java tout en remontant les erreurs à la compilation ? La JSR 269 introduite dans Java 6, plus connue sous le nom d&rsquo;API AnnotationProcessor, permet de traiter les annotations à la compilation en générant du code Java. C&rsquo;est la solution utilisée par Selma pour répondre au besoin.</p>\n<p>Selma fournit un AnnotationProcessor nécessaire uniquement à la compilation, qui va générer l&rsquo;implémentation des interfaces de mapping annotées avec @Mapper.</p>\n<p>Au runtime, vous pouvez passer par la classe Selma pour récupérer votre instance de Mapper via son interface.</p>\n</p>\n<h2 id=\"SelmalemappingJavaàlacompilation-Miseenplace\">Mise en place</h2>\n<p>Il faut tout d&rsquo;abord ajouter Selma dans les dépendances du POM :</p>\n<pre class=\"lang:xml decode:1 \" >&lt;!-- scope provided car le processor est uniquement requis pour la compilation --&gt;\n&lt;dependency&gt;\n &lt;groupId&gt;fr.xebia.extras&lt;/groupId&gt;\n &lt;artifactId&gt;selma-processor&lt;/artifactId&gt;\n &lt;version&gt;0.4&lt;/version&gt;\n &lt;scope&gt;provided&lt;/scope&gt;\n&lt;/dependency&gt;\n\n&lt;!-- Seul dependance requise au runtime --&gt;\n&lt;dependency&gt;\n &lt;groupId&gt;fr.xebia.extras&lt;/groupId&gt;\n &lt;artifactId&gt;selma&lt;/artifactId&gt;\n &lt;version&gt;0.4&lt;/version&gt;\n&lt;/dependency&gt;\n\n</pre>\n<p>Vous pouvez ensuite déclarer une interface décrivant le contrat de votre mapping.<br />Par exemple pour mapper un bean Person vers le bean PersonDto:</p>\n<pre class=\"lang:java decode:1 \" >@Mapper\npublic interface PersonMapper {\n\n PersonDto asPersonDto(Person in);\n\n}\n\n</pre>\n<p>Voilà, vous avez défini votre premier mapper Selma ; son implémentation sera générée à la compilation. Vous n&rsquo;avez plus qu&rsquo;à l&rsquo;utiliser là où vous en avez besoin :</p>\n<pre class=\"lang:java decode:1 \" >// Récupérer l'instance du mapper\nPersonMapper mapper = Selma.mapper(PersonMapper.class);\n// Executer le mapping pour convertir notre Person en PersonDto\nPersonDto res = mapper.asPersonDto(myPerson);\n\n</pre>\n<p>Ce petit exemple de code vous explique comment récupérer une instance du PersonMapper et l&rsquo;utiliser au runtime. Comme vous pouvez le constater, le code est léger et facilement testable.</p>\n</p>\n<h2 id=\"SelmalemappingJavaàlacompilation-StratégiedeMapping\">Stratégie de Mapping</h2>\n<p>À la compilation, Selma a généré une classe implémentant l&rsquo;interface PersonMapper qui se charge du mapping. La stratégie de mapping par défaut consiste à faire correspondre les champs via les noms des getter et setter. Il faut que Person et PersonDto aient exactement les même champs, et qu&rsquo;il existe un constructeur vide pour que cela fonctionne immédiatement.</p>\n<p>Admettons maintenant que PersonDto ne contienne pas tous les champs de Person, ou qu&rsquo;il contienne des champs supplémentaires ; ces champs doivent être ignorés pour permettre la compilation.</p>\n<pre class=\"lang:java decode:1 \" >@Mapper\npublic interface PersonMapper {\n\n @IgnoreFields({&quot;password&quot;, &quot;technicalId&quot;})\n PersonDto asPersonDto(Person in);\n\n}</pre>\n<p>Dans cette nouvelle version de PersonMapper, les champs password et technicalId seront ignorés par le code de mapping généré.</p>\n</p>\n<h2 id=\"SelmalemappingJavaàlacompilation-Fairecorrespondredeschampsdifférents\">Faire correspondre des champs différents</h2>\n<p>Il arrive que les beans à mapper ne soient pas exactement nommés de la même façon, par exemple &quot;dob&quot; peut devenir &quot;birthDate&quot;, ou &quot;nom&quot; devenir &quot;name&quot;. Dans ces deux cas, Selma ne sait pas réaliser le mapping tout seul pour ces champs.<br />La compilation finira en erreur car la philosophie de Selma est de remonter l&rsquo;erreur au plus tôt.<br />Ici, la solution est de déclarer un mapping personnalisé des champs.</p>\n<p>Par exemple:</p>\n<pre class=\"lang:java decode:1 \" >@Mapper\npublic interface PersonMapper {\n\n @Fields({\n  @Field({&quot;dob&quot;, &quot;birthdate&quot;}), @Field({&quot;nom&quot;, &quot;name&quot;})\n })\n PersonDto asPersonDto(Person in);\n\n}</pre>\n<p>J&rsquo;attire ici votre attention sur le fait que le mapping ignore la casse. Avec cette nouvelle configuration, le mapping des champs &quot;dob&quot; et &quot;nom&quot; sera assuré comme souhaité et la compilation finie sans erreur.</p>\n</p>\n<h2 id=\"SelmalemappingJavaàlacompilation-Personnaliserlemappingd&#39;uneenum\">Personnaliser le mapping d&rsquo;une énumération</h2>\n<p>Dans le cas des énumérations, Selma, utilise par défaut une stratégie considérant que toutes les valeurs de l&rsquo;énumération source existent dans l&rsquo;énumération destination. Là encore, si vous n&rsquo;avez pas les mêmes valeurs dans les deux énumération, la compilation échouera. Pour résoudre ce problème, vous pouvez fournir une valeur par défaut qui sera utilisée pour les valeurs sources n&rsquo;ayant pas d&rsquo;équivalent en destination.</p>\n<pre class=\"lang:java decode:1 \" >@Mapper\npublic interface PersonMapper {\n\n @EnumMapper(from=MemberLevel.class, to=MemberLevelDto.class, defaultValue=&quot;NOOB&quot;)\n PersonDto asPersonDto(Person in);\n\n}</pre>\n<p>Cette nouvelle configuration permet d&rsquo;indiquer à Selma, d&rsquo;utiliser MemberLevelDto.NOOB comme valeur par défaut.<br />Notez tout de même que l&rsquo;EnumMapper peut-être ajouté en paramètre de @Mapper pour être disponible au niveau de la classe.<br />Et dernier raffinement, vous pouvez utiliser l&rsquo;EnumMapper sur une méthode spécialisée pour le mapping de l&rsquo;enum.</p>\n<pre class=\"lang:java decode:1 \" >@Mapper\npublic interface PersonMapper {\n\n PersonDto asPersonDto(Person in);\n\n @EnumMapper(defaultValue=&quot;NOOB&quot;)\n MemberLevelDto asMemberLevelDto(MemberLevel in);\n\n}</pre>\n<p>Cette technique est moins verbeuse car les énumérations source et destination sont données par la méthode de mapping. Le code généré à la compilation utilisera la méthode asMemberLevelDto pour assurer le mapping requis.</p>\n</p>\n<h2 id=\"SelmalemappingJavaàlacompilation-Allerplusloindanslemapping\">Aller plus loin dans le mapping</h2>\n<p>Ok, le mapping automatique c&rsquo;est bien gentil, mais ça ne fait pas tout. Parfois, il faut retourner à ses premières amours, le code. Dans le cas de Selma, par exemple, les conversions ne sont pas gérées au-delà de ce que fournit la JVM sans perte. La bibliothèqe supporte la conversion de type natif à type objet, les tableaux et les collections. Si vous voulez convertir une String en Date, ou un Long en Double, bref faire une conversion et non un mapping, vous devrez utiliser votre propre code, via un Custom Mapper.</p>\n<p>Prenons l&rsquo;exemple d&rsquo;une date à convertir en String pour le PersonMapper</p>\n<pre class=\"lang:java decode:1 \" >@Mapper(withMapper=CustomMapper.class)\npublic interface PersonMapper {\n\n PersonDto asPersonDto(Person in);\n\n}\n\n</pre>\n<pre class=\"lang:java decode:1 \" >public class CustomMapper{\n\n String dateToGMTString(Date in){\n\n  return in.toGMTString();\n }\n\n}</pre>\n<p>Ce mapper personnalisé est assez basique, mais il a l&rsquo;avantage de démontrer simplement son utilisation. Lorsque Selma rencontrera un champs à mapper d&rsquo;un type date vers un type String, il utilisera une instance de notre CustomMapper. Cela fonctionne avec n&rsquo;importe quelle association de type d&rsquo;entrée vers type de sortie.</p>\n</p>\n<h2 id=\"SelmalemappingJavaàlacompilation-Etencoreplus\">Et encore plus</h2>\n<p>Dans cet article, j&rsquo;ai tenté de vous donner un aperçu des fonctionnalités de Selma, pour plus d&rsquo;information vous pouvez consulter le site du projet : <a href=\"http://selma-java.org/\" rel=\"nofollow\">http://selma-java.org/</a>.</p>\n<p>Parmi les fonctionnalités supplémentaires, vous trouverez le support pour les JDK 6 à 8, les tableaux à N-dimensions, les collections et les maps, et quelques raffinements comme le mapping post-processor pour encore plus de contrôle. </p>\n</p>\n<h2 id=\"SelmalemappingJavaàlacompilation-Pourconclure\">Pour conclure</h2>\n<p>La librairie Selma est encore jeune (0.4 à l&rsquo;écriture de l&rsquo;article), mais elle est déjà utilisée en production sans problème. Si comme moi, vous avez des problèmes avec les bibliothèques de mapping au runtime, et que vous souhaitez explorer une nouvelle voie, testez Selma. La migration est simple, le mapping est plus performant et il garantit l&rsquo;immuabilité de l&rsquo;objet source.</p>\n<p>Notez enfin qu&rsquo;il existe d&rsquo;autres alternatives à Dozer, la meilleure de mon point de vue étant <a href=\"https://code.google.com/p/orika/\" rel=\"nofollow\">Orika</a> ; bien que fonctionnant au runtime, il utilise l&rsquo;API JavaCompiler pour générer le code du mapping. N&rsquo;hésitez pas à nous remonter vos éventuels bugs, ainsi que les évolutions à inscrire dans la roadmap.</p>\n\"}";

        // When
        Post result = objectMapper.readValue(jsonString, Post.class);

        // Then
        assertThat(result).isNotNull();
    }


}